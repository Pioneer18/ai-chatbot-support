# # This workflow will build a docker container, publish it to Google Container
# # Registry, and deploy it to GKE when there is a push to the "main"
# # branch.
# #
# # To configure this workflow:
# #
# # 1. Enable the following Google Cloud APIs:
# #
# #    - Artifact Registry (artifactregistry.googleapis.com)
# #    - Google Kubernetes Engine (container.googleapis.com)
# #    - IAM Credentials API (iamcredentials.googleapis.com)
# #
# #    You can learn more about enabling APIs at
# #    https://support.google.com/googleapi/answer/6158841.
# #
# # 2. Ensure that your repository contains the necessary configuration for your
# #    Google Kubernetes Engine cluster, including deployment.yml,
# #    kustomization.yml, service.yml, etc.
# #
# # 3. Create and configure a Workload Identity Provider for GitHub:
# #    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
# #
# #    Depending on how you authenticate, you will need to grant an IAM principal
# #    permissions on Google Cloud:
# #
# #    - Artifact Registry Administrator (roles/artifactregistry.admin)
# #    - Kubernetes Engine Developer (roles/container.developer)
# #
# #    You can learn more about setting IAM permissions at
# #    https://cloud.google.com/iam/docs/manage-access-other-resources
# #
# # 5. Change the values in the "env" block to match your values.

# name: 'Build and Deploy to GKE'

# on:
#   push:
#     branches:
#       - '"main"'

# env:
#   PROJECT_ID: 'ai-chatbot-support-444616'
#   GAR_LOCATION: 'us-central1'
#   GKE_CLUSTER: 'ai-support-chatbot-cluster'
#   GKE_REGION: 'us-central1'
#   GKE_ZONE: 'us-central1-c'
#   DEPLOYMENT_NAME: 'chatbot-support'
#   WORKLOAD_IDENTITY_PROVIDER: 'projects/750880222185/locations/global/workloadIdentityPools/github/providers/my-repo'

# jobs:
#   setup-build-publish-deploy:
#     name: 'Setup, Build, Publish, and Deploy'
#     runs-on: 'ubuntu-latest'
#     environment: 'production'

#     permissions:
#       contents: 'read'
#       id-token: 'write'

#     steps:
#       - name: 'Checkout'
#         uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

#       # Configure Workload Identity Federation and generate an access token.
#       #
#       # See https://github.com/google-github-actions/auth for more options,
#       # including authenticating via a JSON credentials file.
#       - id: 'auth'
#         name: 'Authenticate to Google Cloud'
#         uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
#         with:
#           workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
#           service_account: "${{ env.PROJECT_ID }}@appspot.gserviceaccount.com"

#       # Authenticate Docker to Google Cloud Artifact Registry
#       - name: 'Docker Auth'
#         uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
#         with:
#           username: 'oauth2accesstoken'
#           password: '${{ steps.auth.outputs.auth_token }}'
#           registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

#       # Get the GKE credentials so we can deploy to the cluster
#       - name: 'Set up GKE credentials'
#         uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
#         with:
#           cluster_name: '${{ env.GKE_CLUSTER }}'
#           location: '${{ env.GKE_ZONE }}'

#       # Build and push Docker image
#       - name: Build Docker Image
#         run: docker build -t gcr.io/${{ env.PROJECT_ID }}/chatbot-support:latest .

#       - name: Push Docker Image to GCR
#         run: docker push gcr.io/${{ env.PROJECT_ID }}/chatbot-support:latest

#       # Configure kubectl for GKE
#       - name: Configure kubectl
#         run: |
#           gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
#             --region ${{ env.GKE_REGION }} --project ${{ env.PROJECT_ID }}

#       # Deploy to GKE
#       - name: Apply Kubernetes Manifests
#         run: kubectl apply -f k8s/deployment.yml
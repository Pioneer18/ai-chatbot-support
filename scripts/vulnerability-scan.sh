#!/bin/bash

# Define the image to scan
IMAGE="gcr.io/ai-chatbot-support-444616/chatbot-support"

# Run the gcloud command to list tags and vulnerabilities
SCAN_RESULTS=$(gcloud beta container images list-tags \
    "$IMAGE" \
    --show-occurrences-from=1 \
    --format="json")

SCAN_PID=$!

wait $SCAN_PID

# Check if SCAN_RESULTS is empty
if [[ -z "$SCAN_RESULTS" ]]; then
    echo "No scan results found. Exiting."
    exit 0
fi

# Parse JSON to find the first image with vulnerabilities
LATEST_SCAN_RESULT=$(echo "$SCAN_RESULTS" | jq -r '.[0]')

# Check if vulnerabilities exist for the latest image
VULN_COUNTS=$(echo "$LATEST_SCAN_RESULT" | jq -r '.vuln_counts')

# If vuln_counts does not exist, exit
if [[ "$VULN_COUNTS" == "null" ]]; then
    echo "No vulnerabilities found for the latest image."
    exit 0
fi

# Extract the CRITICAL count from the vuln_counts object
CRITICAL_COUNT=$(echo "$VULN_COUNTS" | jq -r '.CRITICAL // 0')

# Debug: Print the CRITICAL count
echo "CRITICAL count extracted: $CRITICAL_COUNT"

# Output scan results for the latest image
echo "Vulnerabilities for the latest image:"
echo "$LATEST_SCAN_RESULT" | jq

echo "Critical vulnerabilities found: $CRITICAL_COUNT"

# Stop the workflow if CRITICAL vulnerabilities are present
if [ "$CRITICAL_COUNT" -gt 0 ]; then
    echo "CRITICAL vulnerabilities detected for the latest image! Stopping the workflow."
    exit 1
else
    echo "No CRITICAL vulnerabilities detected for the latest image. Proceeding."
fi

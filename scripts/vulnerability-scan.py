import json
import subprocess
import sys
from google.cloud import container_v1

# Set up the image to scan
IMAGE = "gcr.io/ai-chatbot-support-444616/chatbot-support"

# Function to execute gcloud command and get scan results
def get_scan_results(image):
    command = [
        "gcloud", "beta", "container", "images", "list-tags",
        image, "--show-occurrences-from=25", "--format=json"
    ]
    try:
        result = subprocess.run(command, capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print(f"Error executing gcloud command: {e}", file=sys.stderr)
        return None

# Parse JSON to extract vulnerabilities
def parse_vulnerabilities(scan_results):
    try:
        scan_data = json.loads(scan_results)
        # Get the vulnerability summary for the latest "v1" image tag
        vulnerabilities = [
            entry["vulnerabilitySummary"]
            for entry in scan_data if "v1" in entry.get("tags", [])
        ]
        return vulnerabilities[0] if vulnerabilities else None
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}", file=sys.stderr)
        return None

# Extract CRITICAL count from vulnerabilities
def get_critical_count(vulnerabilities):
    if vulnerabilities:
        try:
            critical_count = vulnerabilities.get("Discovery", {}).get("vuln_counts", {}).get("CRITICAL", 0)
            return critical_count
        except KeyError as e:
            print(f"Error extracting critical count: {e}", file=sys.stderr)
            return 0
    return 0

# Main execution
def main():
    # Get the scan results
    scan_results = get_scan_results(IMAGE)
    if not scan_results:
        print("No scan results found. Exiting.")
        sys.exit(0)

    # Parse the JSON data for vulnerabilities
    latest_image_vulnerabilities = parse_vulnerabilities(scan_results)
    if not latest_image_vulnerabilities:
        print("No vulnerabilities found for the latest image.")
        sys.exit(0)

    # Debugging: Print the vulnerability summary
    print("Vulnerability summary for the latest image:")
    print(json.dumps(latest_image_vulnerabilities, indent=2))

    # Extract the CRITICAL count
    critical_count = get_critical_count(latest_image_vulnerabilities)

    # Debugging: Print the CRITICAL count
    print(f"CRITICAL count extracted: {critical_count}")

    # Check and handle critical vulnerabilities
    if critical_count > 0:
        print("CRITICAL vulnerabilities detected for the latest image! Stopping the workflow.")
        sys.exit(1)
    else:
        print("No CRITICAL vulnerabilities detected for the latest image. Proceeding.")

# Execute the script
if __name__ == "__main__":
    main()